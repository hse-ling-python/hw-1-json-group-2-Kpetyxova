{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pycodestyle in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (2.5.0)\n",
      "Requirement already satisfied: flake8 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (3.7.8)\n",
      "Requirement already satisfied: pycodestyle_magic in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (0.4)\n",
      "Requirement already satisfied: mccabe<0.7.0,>=0.6.0 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from flake8) (0.6.1)\n",
      "Requirement already satisfied: entrypoints<0.4.0,>=0.3.0 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from flake8) (0.3)\n",
      "Requirement already satisfied: pyflakes<2.2.0,>=2.1.0 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from flake8) (2.1.1)\n",
      "\u001b[33mYou are using pip version 10.0.1, however version 19.2.3 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "# ! pip3 install pycodestyle flake8 pycodestyle_magic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pycodestyle_magic'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-223-fd62d907bcf5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'load_ext'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'pycodestyle_magic'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pycodestyle_on'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_line_magic\u001b[0;34m(self, magic_name, line, _stack_depth)\u001b[0m\n\u001b[1;32m   2311\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'local_ns'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf_locals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2312\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2313\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2314\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<//anaconda3/lib/python3.7/site-packages/decorator.py:decorator-gen-64>\u001b[0m in \u001b[0;36mload_ext\u001b[0;34m(self, module_str)\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/magics/extension.py\u001b[0m in \u001b[0;36mload_ext\u001b[0;34m(self, module_str)\u001b[0m\n\u001b[1;32m     31\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mmodule_str\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mUsageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Missing module name.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshell\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextension_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_extension\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mres\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'already loaded'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/extensions.py\u001b[0m in \u001b[0;36mload_extension\u001b[0;34m(self, module_str)\u001b[0m\n\u001b[1;32m     78\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmodule_str\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodules\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mprepended_to_syspath\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mipython_extension_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m                     \u001b[0mmod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimport_module\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodule_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mmod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__file__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mipython_extension_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m                         print((\"Loading extensions from {dir} is deprecated. \"\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/importlib/__init__.py\u001b[0m in \u001b[0;36mimport_module\u001b[0;34m(name, package)\u001b[0m\n\u001b[1;32m    125\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0mlevel\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_bootstrap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_gcd_import\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpackage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_gcd_import\u001b[0;34m(name, package, level)\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pycodestyle_magic'"
     ]
    }
   ],
   "source": [
    "# %load_ext pycodestyle_magic\n",
    "# %pycodestyle_on"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном задании мы преобразовываем json в объект питона, затем считаем количество твитов. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2556"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "import string\n",
    "from string import punctuation\n",
    "import json\n",
    "import collections\n",
    "from pprint import pprint\n",
    "twitter = []\n",
    "for line in open('hw_3_twitter.json'):\n",
    "    twitter.append(json.loads(line))\n",
    "\n",
    "len(twitter)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заводим счетчик, к которому будем добавлять единицу каждый раз при прохождении удаленного твита. Делим значение этого счетчика на количество всех твитов и умножаем на 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14.162754303599373\n"
     ]
    }
   ],
   "source": [
    "counter = 0 \n",
    "for twit in twitter:\n",
    "    if 'delete' in twit:\n",
    "        counter += 1\n",
    "        a = (counter / len(twitter)) * 100\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 3"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Заводим пустой словарь, в который добавляем ключ, если его еще нет, и добавляем единицу к значению, если ключ уже есть в словаре. Сортируем по знеачениям."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "en : 719\n",
      "ja : 438\n",
      "es : 173\n",
      "ko : 149\n",
      "th : 123\n",
      "ar : 119\n",
      "und : 117\n",
      "in : 71\n",
      "pt : 69\n",
      "fr : 35\n",
      "tr : 30\n",
      "tl : 29\n",
      "hi : 23\n",
      "ru : 15\n",
      "fa : 8\n",
      "zh : 8\n",
      "ca : 7\n",
      "ur : 6\n",
      "nl : 6\n",
      "de : 6\n",
      "ta : 4\n",
      "it : 4\n",
      "ht : 4\n",
      "et : 4\n",
      "pl : 4\n",
      "el : 3\n",
      "fi : 3\n",
      "vi : 3\n",
      "eu : 2\n",
      "cy : 2\n",
      "bg : 2\n",
      "is : 1\n",
      "uk : 1\n",
      "iw : 1\n",
      "lv : 1\n",
      "sv : 1\n",
      "da : 1\n",
      "no : 1\n",
      "hu : 1\n"
     ]
    }
   ],
   "source": [
    "freq = {}\n",
    "for twit in twitter:\n",
    "    if 'delete' not in twit:\n",
    "        if twit['lang'] in freq:\n",
    "            freq[twit['lang']] += 1\n",
    "        else:\n",
    "            freq[twit['lang']] = 1\n",
    "list_d = list(freq.items())\n",
    "list_d.sort(key=lambda i: i[1], reverse=True)\n",
    "for i in list_d:\n",
    "    print(i[0], ':', i[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заводим пустой список. Ищем в словаре ключ 'user', значением которого является словарь, из этого словаря достаем id пользователя и с помощью Counter считаем, сколько раз встречается пользователь. Оставляем только пользователей, которые написали больше одного твита и считаем, сколько есть таких пользователей."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "same = []\n",
    "answer = 0\n",
    "for twit in twitter:\n",
    "    if 'delete' not in twit:\n",
    "        if 'user' in twit:\n",
    "            user = twit['user']\n",
    "            id_user = user['id']\n",
    "            same.append(id_user)\n",
    "            counter = collections.Counter(same)\n",
    "            counter = dict(counter)\n",
    "for key in counter:\n",
    "    if int(counter[key]) > 1:\n",
    "        answer += 1\n",
    "print(answer)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заводим пустой список. Затем, ищем в словре ключ 'entities', значением которого является словарь, из этого словаря достаем значение ключа 'hashtags'. Если хэштег есть, то добавляем его в созданный ранее список, считаем, сколько раз встречается каждый хэштег с помощью Counter и сортируем. Выводим топ-20 хэштегов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BTS : 17\n",
      "방탄소년단 : 13\n",
      "AMAs : 11\n",
      "人気投票ガチャ : 8\n",
      "태형 : 7\n",
      "뷔 : 6\n",
      "BTSinChicago : 5\n",
      "BTSLoveYourselfTour : 5\n",
      "오늘의방탄 : 5\n",
      "PledgeForSwachhBharat : 5\n",
      "MPN : 5\n",
      "PCAs : 4\n",
      "V : 4\n",
      "시카고1회차공연 : 4\n",
      "เป๊กผลิตโชค : 4\n",
      "JIMIN : 4\n",
      "running : 3\n",
      "NCT : 3\n",
      "지민 : 3\n",
      "WajahmuPlastik : 3\n"
     ]
    }
   ],
   "source": [
    "list_hash = []\n",
    "a = 0\n",
    "for twit in twitter:\n",
    "    if 'delete' not in twit:\n",
    "        if 'entities' in twit:\n",
    "            entities = twit['entities']\n",
    "            if 'hashtags' in entities:\n",
    "                hashtag = entities['hashtags']\n",
    "                if hashtag != []:\n",
    "                    for twit in hashtag:\n",
    "                        list_hash.append(twit['text'])\n",
    "counter = collections.Counter(list_hash)\n",
    "counter = dict(counter)\n",
    "list_h = list(counter.items())\n",
    "list_h.sort(key=lambda i: i[1], reverse=True)\n",
    "for i in list_h:\n",
    "    if a < 20:\n",
    "        print(i[0], ':', i[1])\n",
    "        a += 1    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Оставляем только оригинальные тексты на английском языке, затем с помощью регулярного выражения заменяем знаки препинания на пробелы, убираем загланвые буквы. Записываем порлученный результат в один список, с помощью Counter считаем, сколько раз встречается каждое слово, сортируем по значению и выводим топ-20 слов. Задание обдумывали вместе с Вероникой Смилгой и Казаковым Романом."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the : 107\n",
      "to : 79\n",
      "a : 67\n",
      "i : 61\n",
      "and : 58\n",
      "you : 45\n",
      "is : 41\n",
      "for : 40\n",
      "of : 40\n",
      "it : 38\n",
      "in : 32\n",
      "that : 30\n",
      "my : 26\n",
      "me : 26\n",
      "on : 25\n",
      "be : 22\n",
      "this : 20\n",
      "are : 20\n",
      "have : 19\n",
      "so : 18\n"
     ]
    }
   ],
   "source": [
    "new = []\n",
    "new_list = []\n",
    "flat_list = []\n",
    "flat_list_two = []\n",
    "a = 0\n",
    "for twit in twitter:\n",
    "    if 'retweeted_status' not in twit:\n",
    "        if 'quoted_status' not in twit:\n",
    "            if 'lang' in twit:\n",
    "                if twit['lang'] == 'en':\n",
    "                    if 'text' in twit:\n",
    "                        words = twit['text']\n",
    "                        words = re.sub(r'[^\\w^\\s\\']', '', words)\n",
    "                        words = words.lower()\n",
    "                        words = words.split()\n",
    "                        new.append(words)\n",
    "new_list.append(new)\n",
    "for sublist in new_list:\n",
    "    for item in sublist:\n",
    "        flat_list.append(item)\n",
    "for sublist in flat_list:\n",
    "    for item in sublist:\n",
    "        flat_list_two.append(item)\n",
    "counter = collections.Counter(flat_list_two)\n",
    "counter = dict(counter)\n",
    "final_dict = list(counter.items())\n",
    "final_dict.sort(key=lambda i: i[1], reverse=True)\n",
    "for i in final_dict:\n",
    "    if a < 20:\n",
    "        print(i[0], ':', i[1])\n",
    "        a += 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ищем в словре ключ 'user', значением которого является словарь, в этом словаре ищем значение 'followers_count'. Теперь мы можем вытащить имя пользователя и количество его читателей. Сортируем выборку по количеству подписчиков и выводим результат."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filosofía♕ : 2521403\n",
      "FITNESS Magazine : 1491309\n",
      "malaysiakini.com : 1206759\n",
      "NYT Science : 1137374\n",
      "Gramática : 625463\n",
      "TGRT Haber : 392472\n",
      "The Sun Football ⚽ : 383698\n",
      "Melbourne, Australia : 374222\n",
      "Roznama Express : 318189\n",
      "💞 ცųཞɠɛཞცơơɠıɛ 💞 : 311319\n"
     ]
    }
   ],
   "source": [
    "# задание 7\n",
    "list_users = []\n",
    "all_users = []\n",
    "a = 0\n",
    "for twit in twitter:\n",
    "    if 'delete' not in twit:\n",
    "        if 'user' in twit:\n",
    "            user = twit['user']\n",
    "            if 'followers_count' in user:\n",
    "                list_users.append(user['name'])\n",
    "                list_users.append(user['followers_count'])\n",
    "                tuple_users = tuple(list_users)\n",
    "                all_users.append(tuple_users)\n",
    "                list_users = []\n",
    "all_users = dict(all_users)\n",
    "list_u = list(all_users.items())\n",
    "list_u.sort(key=lambda i: i[1], reverse=True)\n",
    "for i in list_u:\n",
    "    if a < 10:\n",
    "        print(i[0], ':', i[1])\n",
    "        a += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Находим в словаре ключ 'source', из его значения убираем ненужные нам тэги, оставляя только названия приложений, которые мы записываем в список и с помощью Counter считаем, сколько раз встречается каждое название. Затем создаем словарь и сортируем по значениям. Выводим топ-10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Twitter for iPhone : 800\n",
      "Twitter for Android : 695\n",
      "Twitter Web Client : 140\n",
      "twittbot.net : 122\n",
      "Twitter Lite : 51\n",
      "Twitter for iPad : 28\n",
      "TweetDeck : 23\n",
      "Facebook : 17\n",
      "IFTTT : 14\n",
      "تطبيق قرآني : 10\n"
     ]
    }
   ],
   "source": [
    "list_source = []\n",
    "a = 0\n",
    "for twit in twitter:\n",
    "    if 'delete' not in twit:\n",
    "        if 'source' in twit:\n",
    "            twit['source'] = re.sub(r'<a.*?>', '', twit['source'])\n",
    "            twit['source'] = re.sub(r'</a>', '', twit['source'])\n",
    "            list_source.append(twit['source'])\n",
    "counter = collections.Counter(list_source)\n",
    "counter = dict(counter)\n",
    "new_list_source = list(counter.items())\n",
    "new_list_source.sort(key=lambda i: i[1], reverse=True)\n",
    "for i in new_list_source:\n",
    "    if a < 10:\n",
    "        print(i[0], ':', i[1])\n",
    "        a += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
